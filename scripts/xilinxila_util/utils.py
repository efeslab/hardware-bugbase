import os
from pathlib import Path
# Headers:
#    | Instance | Module | Total LUTs | Logic LUTs | LUTRAMs | SRLs |  FFs  | RAMB36 | RAMB18 | DSP Blocks |
# 0        1         2            3        4             5        6      7       8        9         10
INTERESTING_HEADERS = {
    1: "Instance",
    2: "Module",
    3: "Total LUTs",
    7: "FFs",
    8: "RAMB36",
    9: "RAMB18",
}

def analyse_summary(summary: str, instance_name: str, module_name: str):
    """
    \param[in] instance_name: the name of the instance whose resource util you are interested in. (None means do not match)
    \param[in] module_name: the name of the module whose resource util you are interested in. (None means do not match)
    \param[in] summary: the whole content of a utilization report generated by vivado
    Return : {str -> int}
    Dict keys are the same as the value of the above INTERESTING_HEADERS
    """
    result = {}
    for line in summary.splitlines():
        if line.count('|') >= 10:
            fields = [ x.strip() for x in line.split('|') ]
            if instance_name and instance_name != fields[1]:
                continue
            if module_name and module_name != fields[2]:
                continue
            for col, field in enumerate(fields):
                if col in INTERESTING_HEADERS:
                    result[INTERESTING_HEADERS[col]] = field
            return result
    raise NotImplementedError("Cannot find a matching instance")

def analyse_dir_summary(dirname: str, instance_name: str, module_name:str):
    p = Path(dirname)
    rpt = list(p.glob("*.util.rpt"))
    assert(len(rpt) <= 1)
    if len(rpt) == 0:
        return None
    elif len(rpt) == 1:
        rpt = rpt[0]
    else:
        raise NotImplementedError("Cannot handle two resource util report in the same builddir")
    with open(rpt, "r") as f:
        return analyse_summary(f.read(), instance_name, module_name)

def report_dir_summary(dirname: str, instance_name: str, module_name: str):
    res = analyse_dir_summary(dirname, instance_name, module_name)
    sorted_headers = [ kvpair[1] for kvpair in sorted(INTERESTING_HEADERS.items(), key=lambda p: p[0]) ]
    if res:
        print("{}: {}".format(dirname, ','.join(sorted_headers)))
        print('\t' + ';'.join([str(res[x]) for x in sorted_headers]))
    else:
        print("Cannot find utilization report in {}".format(dirname))
